{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport ProjectsComponent from './ProjectsComponent.vue';\nimport TasksComponent from './TasksComponent.vue';\nimport CreateTaskForm from './CreateTaskForm.vue';\nimport ModalComponent from './ModalComponent.vue';\nimport CreateProjectForm from './CreateProjectForm.vue';\nexport default {\n  data() {\n    return {\n      user: null,\n      selectedSection: null,\n      sectionData: [],\n      isModalOpen: false,\n      modalComponent: null,\n      modalTitle: ''\n    };\n  },\n  computed: {\n    currentComponent() {\n      switch (this.selectedSection) {\n        case 'projects':\n          return ProjectsComponent;\n        case 'tasks':\n          return TasksComponent;\n        default:\n          return null;\n      }\n    }\n  },\n  created() {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      this.user = JSON.parse(userData);\n      this.selectSection('projects');\n    } else {\n      this.$router.push('/login');\n    }\n  },\n  methods: {\n    openModal(type) {\n      this.isModalOpen = true;\n      if (type === 'task') {\n        this.modalComponent = CreateTaskForm;\n        this.modalTitle = 'Create Task';\n      } else if (type === 'project') {\n        this.modalComponent = CreateProjectForm;\n        this.modalTitle = 'Create Project';\n      }\n    },\n    closeModal() {\n      this.isModalOpen = false;\n    },\n    createTask(taskData) {\n      fetch('http://127.0.0.1:8000/api/manager/tasks/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData),\n        credentials: 'include'\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to create task');\n        }\n        return response.json();\n      }).then(() => {\n        this.fetchSectionData('tasks');\n        this.closeModal();\n      }).catch(error => console.error('Error creating task:', error));\n    },\n    createProject(projectData) {\n      fetch('http://127.0.0.1:8000/api/manager/projects/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(projectData),\n        credentials: 'include'\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to create project');\n        }\n        return response.json();\n      }).then(() => {\n        this.fetchSectionData('projects');\n        this.closeModal();\n      }).catch(error => console.error('Error creating project:', error));\n    },\n    selectSection(section) {\n      this.selectedSection = section;\n      this.fetchSectionData(section);\n    },\n    fetchSectionData(section) {\n      let url = '';\n      const userId = this.user.id; // Получаем user_id из локального хранилища\n      switch (section) {\n        case 'projects':\n          url = `http://127.0.0.1:8000/api/manager/projects`; // URL для получения проектов\n          break;\n        case 'tasks':\n          url = `http://127.0.0.1:8000/api/user/tasks`; // URL для получения задач\n          break;\n      }\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId\n        }),\n        credentials: 'include'\n      }).then(response => response.json()).then(data => {\n        this.sectionData = data;\n      }).catch(error => console.error('Error fetching data:', error));\n    }\n  },\n  components: {\n    ProjectsComponent,\n    TasksComponent,\n    CreateTaskForm,\n    ModalComponent,\n    CreateProjectForm\n  }\n};","map":{"version":3,"names":["ProjectsComponent","TasksComponent","CreateTaskForm","ModalComponent","CreateProjectForm","data","user","selectedSection","sectionData","isModalOpen","modalComponent","modalTitle","computed","currentComponent","created","userData","localStorage","getItem","JSON","parse","selectSection","$router","push","methods","openModal","type","closeModal","createTask","taskData","fetch","method","headers","body","stringify","credentials","then","response","ok","Error","json","fetchSectionData","catch","error","console","createProject","projectData","section","url","userId","id","user_id","components"],"sources":["D:\\programs\\osp\\domains\\Project-manager\\project-manager-front\\my-project\\src\\components\\MainPageManager.vue"],"sourcesContent":["<template>\n    <div class=\"main-page\" v-if=\"user\">\n      <div class=\"content\">\n        <div class=\"role-actions\">\n          <button v-if=\"user.role === 'Руководитель проекта'\" @click=\"selectSection('projects')\">Projects</button>\n          <button v-if=\"user.role === 'Руководитель проекта'\" @click=\"selectSection('tasks')\">Tasks</button>\n          <button v-if=\"user.role === 'Руководитель проекта'\" @click=\"openModal('task')\">Create Task</button>\n          <button v-if=\"user.role === 'Руководитель проекта'\" @click=\"openModal('project')\">Create Project</button>\n        </div>\n        <div class=\"info-box\" v-if=\"selectedSection\">\n          <h2>{{ selectedSection.toUpperCase() }}</h2>\n          <component :is=\"currentComponent\" :data=\"sectionData || []\" @projectCreated=\"fetchSectionData('projects')\"></component>\n        </div>\n      </div>\n\n      <ModalComponent :isOpen=\"isModalOpen\" @close=\"closeModal\">\n      <template #header>\n        <h3>{{ modalTitle }}</h3>\n      </template>\n      <template #body>\n        <component :is=\"modalComponent\" :user=\"user\" @create-task=\"createTask\" @create-project=\"createProject\" />\n      </template>\n      <template #footer>\n        <button @click=\"closeModal\">Close</button>\n      </template>\n      </ModalComponent>\n\n    </div>\n</template>\n  \n  <script>\n  import ProjectsComponent from './ProjectsComponent.vue';\n  import TasksComponent from './TasksComponent.vue';\n  import CreateTaskForm from './CreateTaskForm.vue';\n  import ModalComponent from './ModalComponent.vue';\n  import CreateProjectForm from './CreateProjectForm.vue';\n  \n  export default {\n    data() {\n      return {\n        user: null,\n        selectedSection: null,\n        sectionData: [],\n        isModalOpen: false,\n        modalComponent: null,\n        modalTitle: '',\n      };\n    },\n    computed: {\n      currentComponent() {\n        switch (this.selectedSection) {\n          case 'projects':\n            return ProjectsComponent;\n          case 'tasks':\n            return TasksComponent;\n          default:\n            return null;\n        }\n      },\n    },\n    created() {\n      const userData = localStorage.getItem('user');\n      if (userData) {\n        this.user = JSON.parse(userData);\n        this.selectSection('projects');\n      } else {\n        this.$router.push('/login');\n      }\n    },\n    methods: {\n      openModal(type) {\n        this.isModalOpen = true;\n        if (type === 'task') {\n          this.modalComponent = CreateTaskForm;\n          this.modalTitle = 'Create Task';\n        } else if (type === 'project') {\n          this.modalComponent = CreateProjectForm;\n          this.modalTitle = 'Create Project';\n        }\n      },\n      closeModal() {\n        this.isModalOpen = false;\n      },\n      createTask(taskData) {\n        fetch('http://127.0.0.1:8000/api/manager/tasks/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(taskData),\n          credentials: 'include',\n        })\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to create task');\n          }\n          return response.json();\n        })\n        .then(() => {\n          this.fetchSectionData('tasks');\n          this.closeModal();\n        })\n        .catch(error => console.error('Error creating task:', error));\n      },\n      createProject(projectData) {\n        fetch('http://127.0.0.1:8000/api/manager/projects/create', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(projectData),\n          credentials: 'include',\n        })\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Failed to create project');\n          }\n          return response.json();\n        })\n        .then(() => {\n          this.fetchSectionData('projects');\n          this.closeModal();\n        })\n        .catch(error => console.error('Error creating project:', error));\n      },\n      selectSection(section) {\n        this.selectedSection = section;\n        this.fetchSectionData(section);\n      },\n      fetchSectionData(section) {\n        let url = '';\n        const userId = this.user.id; // Получаем user_id из локального хранилища\n        switch (section) {\n          case 'projects':\n            url = `http://127.0.0.1:8000/api/manager/projects`; // URL для получения проектов\n            break;\n          case 'tasks':\n            url = `http://127.0.0.1:8000/api/user/tasks`; // URL для получения задач\n            break;\n        }\n        fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ user_id: userId }),\n          credentials: 'include',\n        })\n        .then(response => response.json())\n        .then(data => {\n          this.sectionData = data;\n        })\n        .catch(error => console.error('Error fetching data:', error));\n      },\n    },\n    components: {\n      ProjectsComponent,\n      TasksComponent,\n      CreateTaskForm,\n      ModalComponent,\n      CreateProjectForm\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .header {\n    display: flex;\n    justify-content: space-between;\n    padding: 10px;\n    background-color: #f8f9fa;\n  }\n  .content {\n    padding: 20px;\n  }\n  .role-actions {\n    width: 100%;\n    height: ;\n  }\n  .info-box {\n    border: 1px solid #ccc;\n    padding: 10px;\n    border-radius: 5px;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}