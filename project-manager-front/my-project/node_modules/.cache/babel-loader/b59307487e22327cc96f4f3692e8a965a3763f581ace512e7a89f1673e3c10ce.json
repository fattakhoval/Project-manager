{"ast":null,"code":"export default {\n  props: {\n    projectId: {\n      type: String,\n      required: true\n    },\n    projectName: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      tasks: [],\n      users: []\n    };\n  },\n  created() {\n    this.fetchTasks();\n    this.fetchNonAdminUsers();\n  },\n  methods: {\n    async fetchNonAdminUsers() {\n      try {\n        const response = await fetch('http://127.0.0.1:8000/api/manager/users/non-admin');\n        if (!response.ok) {\n          throw new Error('Failed to fetch users');\n        }\n        const data = await response.json();\n        this.users = data; // Сохраняем пользователей в состоянии компонента\n      } catch (error) {\n        console.error('Error fetching non-admin users:', error);\n      }\n    },\n    async assignUser(taskId, userId) {\n      if (userId) {\n        try {\n          const response = await fetch(`http://127.0.0.1:8000/api/manager/tasks/${taskId}/assign`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              user_id: userId\n            }),\n            credentials: 'include'\n          });\n          if (!response.ok) {\n            throw new Error('Failed to assign user');\n          }\n          const updatedTask = await response.json();\n          console.log('User assigned:', updatedTask);\n          // Обновите задачу в локальном состоянии, если необходимо\n          this.fetchTasks();\n        } catch (error) {\n          console.error('Error assigning user:', error);\n        }\n      }\n    },\n    async updateStatus(taskId, status) {\n      try {\n        const response = await fetch(`http://127.0.0.1:8000/api/manager/tasks/${taskId}/status`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            status\n          }),\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update status');\n        }\n        const updatedTask = await response.json();\n        console.log('Status updated:', updatedTask);\n        // Обновите задачу в локальном состоянии, если необходимо\n        this.fetchTasks();\n      } catch (error) {\n        console.error('Error updating status:', error);\n      }\n    },\n    async fetchTasks() {\n      try {\n        const response = await fetch(`http://0.0.0.0:8000/api/manager/projects/${this.projectId}/tasks`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks');\n        }\n        const data = await response.json();\n        this.tasks = data.data; // Обратите внимание на это изменение\n      } catch (error) {\n        console.error(\"Ошибка при получении задач:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","projectId","type","String","required","projectName","data","tasks","users","created","fetchTasks","fetchNonAdminUsers","methods","response","fetch","ok","Error","json","error","console","assignUser","taskId","userId","method","headers","body","JSON","stringify","user_id","credentials","updatedTask","log","updateStatus","status"],"sources":["D:\\programs\\osp\\domains\\Project-manager\\project-manager-front\\my-project\\src\\components\\ProjectTasks.vue"],"sourcesContent":["<template>\n  <div>\n    <h3>Tasks for Project: {{ projectName }}</h3>\n    <ul>\n      <li v-for=\"task in tasks\" :key=\"task.id\">\n        <h4>{{ task.title }}</h4>\n        <p>{{ task.description }}</p>\n        <p><strong>Status:</strong> {{ task.status }}</p>\n\n        <select v-model=\"task.user_id\" @change=\"assignUser(task.id, task.user_id)\">\n          <option value=\"\"></option>\n          <option v-for=\"user in users\" :key=\"user.id\" :value=\"user.id\">{{ user.name }}</option>\n        </select>\n\n\n        <select v-model=\"task.status\" @change=\"updateStatus(task.id, task.status)\">\n          <option value=\"Назначена\">Назначена</option>\n          <option value=\"Выполняется\">Выполняется</option>\n          <option value=\"Завершена\">Завершена</option>\n        </select>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    projectId: {\n      type: String,\n      required: true,\n    },\n    projectName: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      tasks: [],\n      users: [],\n    };\n  },\n  created() {\n    this.fetchTasks();\n    this.fetchNonAdminUsers();\n  },\n  methods: {\n    async fetchNonAdminUsers() {\n        try {\n          const response = await fetch('http://127.0.0.1:8000/api/manager/users/non-admin');\n          if (!response.ok) {\n            throw new Error('Failed to fetch users');\n          }\n          const data = await response.json();\n          this.users = data; // Сохраняем пользователей в состоянии компонента\n        } catch (error) {\n          console.error('Error fetching non-admin users:', error);\n        }\n      },\n    async assignUser(taskId, userId) {\n      if (userId) {\n        try {\n          const response = await fetch(`http://127.0.0.1:8000/api/manager/tasks/${taskId}/assign`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ user_id: userId }),\n            credentials: 'include',\n          });\n\n          if (!response.ok) {\n            throw new Error('Failed to assign user');\n          }\n\n          const updatedTask = await response.json();\n          console.log('User assigned:', updatedTask);\n          // Обновите задачу в локальном состоянии, если необходимо\n          this.fetchTasks();\n        } catch (error) {\n          console.error('Error assigning user:', error);\n        }\n      }\n    },\n    async updateStatus(taskId, status) {\n      try {\n        const response = await fetch(`http://127.0.0.1:8000/api/manager/tasks/${taskId}/status`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ status }),\n          credentials: 'include',\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to update status');\n        }\n\n        const updatedTask = await response.json();\n        console.log('Status updated:', updatedTask);\n        // Обновите задачу в локальном состоянии, если необходимо\n        this.fetchTasks();\n      } catch (error) {\n        console.error('Error updating status:', error);\n      }\n    },\n    async fetchTasks() {\n      try {\n        const response = await fetch(`http://0.0.0.0:8000/api/manager/projects/${this.projectId}/tasks`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          credentials: 'include',\n        });\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks');\n        }\n\n        const data = await response.json();\n        this.tasks = data.data; // Обратите внимание на это изменение\n      } catch (error) {\n        console.error(\"Ошибка при получении задач:\", error);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Да и так красиво, зачем стили, минимализм все дела */\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}